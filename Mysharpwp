#!/usr/bin/env python3
import argparse
import textwrap
import datetime
import os
import sys
import requests
from bs4 import BeautifulSoup
from collections import defaultdict

# Color codes for terminal output
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

class TechnologyScanner:
    def __init__(self, url):
        self.url = url
        self.technologies = {
            'Analytics': {
                'Google Analytics': ['google-analytics.com/analytics.js', 'gtag/js'],
                'GA4': ['gtag/js', 'ga4.js'],
                'Cloudflare Browser Insights': ['cloudflareinsights.com']
            },
            'Security': {
                'Cloudflare Bot Management': ['cloudflare.com/bot-management'],
                'HSTS': []
            },
            'Font Scripts': {
                'Font Awesome': ['fontawesome.com', 'kit.fontawesome.com']
            },
            'Miscellaneous': {
                'PWA': ['manifest.webmanifest', 'service-worker.js']
            },
            'CDN': {
                'Cloudflare': ['cdn-cgi', 'cloudflare.com']
            },
            'Advertising': {
                'DoubleClick Floodlight': ['doubleclick.net', 'floodlight']
            },
            'Tag Managers': {
                'Google Tag Manager': ['googletagmanager.com/gtm.js']
            },
            'JavaScript Libraries': {
                'Underscore.js': ['underscore-min.js', 'underscore.js'],
                'Moment.js': ['moment.min.js', 'moment.js'],
                'jQuery': ['jquery-3.5.1.min.js', 'jquery.min.js']
            },
            'UI Frameworks': {
                'Bootstrap': ['bootstrap-3.4.1.min.js', 'bootstrap.min.js']
            },
            'RUM': {
                'Cloudflare Browser Insights': ['cloudflareinsights.com']
            }
        }
        self.found_tech = defaultdict(list)

    def scan_page(self, html_content):
        """Scan HTML content for technologies"""
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # Check scripts
        for script in soup.find_all('script', src=True):
            src = script['src'].lower()
            self._check_tech_in_source(src)
        
        # Check links
        for link in soup.find_all('link', href=True):
            href = link['href'].lower()
            self._check_tech_in_source(href)
        
        # Check meta tags for HSTS
        for meta in soup.find_all('meta'):
            if 'http-equiv' in meta.attrs and meta['http-equiv'].lower() == 'strict-transport-security':
                self.found_tech['Security'].append('HSTS')
                break

    def _check_tech_in_source(self, src):
        """Check if source matches any technology patterns"""
        for category, techs in self.technologies.items():
            for tech, patterns in techs.items():
                for pattern in patterns:
                    if pattern.lower() in src:
                        self.found_tech[category].append(tech)
                        return

    def get_results(self):
        """Return formatted results"""
        return self.found_tech

class WordPressScanner:
    def __init__(self):
        self.plugins = {
            'Elementor Pro': '3.18.1',
            'WooCommerce': '8.6.1',
            'Contact Form 7': '5.9.3',
            'Yoast SEO': '21.9'
        }
    
    def generate_mock_cves(self):
        """Generate mock CVE data"""
        cves = defaultdict(list)
        
        cves['critical'] = [
            'CVE-2024-123777', 'CVE-2024-9634',
            'CVE-2024-5332', 'CVE-2024-8836',
            'CVE-2024-0001', 'CVE-2024-0002'
        ]
        
        cves['high'] = [
            'CVE-2023-41665', 'CVE-2023-4165',
            'CVE-2023-0001', 'CVE-2023-0002'
        ]
        
        cves['medium'] = [
            'CVE-2022-28700', 'CVE-2022-33910',
            'CVE-2022-33910', 'CVE-2024-11921',
            'CVE-2025-22777', 'CVE-2023-25450',
            'CVE-2023-34633', 'CVE-2023-93612',
            'CVE-2021-42588', 'CVE-2024-19010',
            'CVE-2022-99730', 'CVE-2022-33910',
            'CVE-2022-27987', 'CVE-2027-27987',
            'CVE-2033-43416', 'CVE-2023-50994',
            'CVE-2033-50994'
        ]
        
        return cves

def format_combined_output(url, tech_data, cve_data, scan_type, verbose=False):
    """Format combined scan results with colorful output"""
    # Create the banner with colors
    banner = f"""
{Colors.RED}███╗░░░███╗██╗░░░██╗  ░██████╗██╗░░██╗░█████╗░██████╗░██████╗░
{Colors.RED}████╗░████║╚██╗░██╔╝  ██╔════╝██║░░██║██╔══██╗██╔══██╗██╔══██╗
{Colors.YELLOW}██╔████╔██║░╚████╔╝░  ╚█████╗░███████║███████║██████╔╝██████╔╝
{Colors.YELLOW}██║╚██╔╝██║░░╚██╔╝░░  ░╚═══██╗██╔══██║██╔══██║██╔══██╗██╔═══╝░
{Colors.RED}██║░╚═╝░██║░░░██║░░░  ██████╔╝██║░░██║██║░░██║██║░░██║██║░░░░░
{Colors.RED}╚═╝░░░░░╚═╝░░░╚═╝░░░  ╚═════╝░╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░░░░

{Colors.GREEN}░██████╗░█████╗░░█████╗░███╗░░██╗███╗░░██╗███████╗██████╗░
{Colors.GREEN}██╔════╝██╔══██╗██╔══██╗████╗░██║████╗░██║██╔════╝██╔══██╗
{Colors.GREEN}╚█████╗░██║░░╚═╝███████║██╔██╗██║██╔██╗██║█████╗░░██████╔╝
{Colors.YELLOW}░╚═══██╗██║░░██╗██╔══██║██║╚████║██║╚████║██╔══╝░░██╔══██╗
{Colors.YELLOW}██████╔╝╚█████╔╝██║░░██║██║░╚███║██║░╚███║███████╗██║░░██║
╚═════╝░░╚════╝░╚═╝░░╚═╝╚═╝░░╚══╝╚═╝░░╚══╝╚══════╝╚═╝░░╚═╝
{Colors.CYAN}By @hacker_sujeet{Colors.END}
"""
    
    output = [banner]
    output.append(f"{Colors.BOLD}●{Colors.END} {Colors.BLUE}{url}{Colors.END} ({Colors.RED}Critical: {len(cve_data['critical']) if cve_data else 0}{Colors.END} {Colors.YELLOW}High: {len(cve_data['high']) if cve_data else 0}{Colors.END} {Colors.GREEN}Medium: {len(cve_data['medium']) if cve_data else 0}{Colors.END})\n")
    
    if scan_type == 'full' or scan_type == 'tech':
        output.append(f"\n{Colors.BOLD}[ TECHNOLOGY DETECTION ]{Colors.END}")
        output.append(f"{Colors.BOLD}=" * 25 + Colors.END)
        if not tech_data:
            output.append("No technologies detected.")
        else:
            for category, technologies in tech_data.items():
                output.append(f"\n{Colors.MAGENTA}{category}{Colors.END}")
                output.append(f"{Colors.MAGENTA}-{Colors.END}" * len(category))
                for tech in sorted(set(technologies)):
                    output.append(f"{Colors.CYAN}•{Colors.END} {tech}")
    
    if scan_type == 'full' or scan_type == 'wp' and cve_data:
        output.append(f"\n\n{Colors.BOLD}[ WORDPRESS VULNERABILITIES ]{Colors.END}")
        output.append(f"{Colors.BOLD}=" * 30 + Colors.END)
        
        if verbose:
            output.append("\n[+] Identified plugins:")
            wp_scanner = WordPressScanner()
            for plugin, version in wp_scanner.plugins.items():
                output.append(f"    - {plugin} (v{version})")
        
        # Critical vulnerabilities
        output.append(f"\n{Colors.RED}Critical{Colors.END}")
        for i in range(0, len(cve_data['critical']), 2):
            if i+1 < len(cve_data['critical']):
                output.append(f"   | {cve_data['critical'][i]} - {cve_data['critical'][i+1]}")
            else:
                output.append(f"   | {cve_data['critical'][i]}")
        
        # High vulnerabilities
        output.append(f"\n{Colors.YELLOW}High{Colors.END}")
        for i in range(0, len(cve_data['high']), 2):
            if i+1 < len(cve_data['high']):
                output.append(f"   | {cve_data['high'][i]} - {cve_data['high'][i+1]}")
            else:
                output.append(f"   | {cve_data['high'][i]}")
        
        # Medium vulnerabilities
        output.append(f"\n{Colors.GREEN}Medium{Colors.END}")
        for i in range(0, len(cve_data['medium']), 2):
            if i+1 < len(cve_data['medium']):
                output.append(f"   | {cve_data['medium'][i]} - {cve_data['medium'][i+1]}")
            else:
                output.append(f"   | {cve_data['medium'][i]}")
    
    if verbose:
        output.append(f"\n\n{Colors.BLUE}[+] Scan completed at: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}{Colors.END}")
        if scan_type == 'full' and cve_data:
            total_vulns = len(cve_data['critical']) + len(cve_data['high']) + len(cve_data['medium'])
            output.append(f"{Colors.BLUE}[+] Total vulnerabilities detected: {total_vulns}{Colors.END}")
    
    return "\n".join(output)

def main():
    parser = argparse.ArgumentParser(
        description="MySharp Web Scanner - Comprehensive Website Analysis Tool",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent('''\
        Basic Usage Examples:
        
        🔹 Full scan (WordPress + Technologies)
          ./mysharp scan -u http://example.com -t full
        
        🔹 WordPress vulnerability scan only
          ./mysharp scan -u http://example.com -t wp
        
        🔹 Technology detection scan only
          ./mysharp scan -u http://example.com -t tech
        
        🔹 Scan with verbose output
          ./mysharp scan -u http://example.com -t full -v
        
        🔹 Output to file
          ./mysharp scan -u http://example.com -t full -o results.txt
        ''')
    )
    
    subparsers = parser.add_subparsers(dest='command', title='commands', required=True)
    
    scan_parser = subparsers.add_parser('scan', help='Scan a website')
    scan_parser.add_argument('-u', '--url', required=True, help='URL to scan')
    scan_parser.add_argument('-t', '--type', choices=['full', 'wp', 'tech'], default='full',
                            help='Scan type: full (default), wp (WordPress only), tech (technologies only)')
    scan_parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose output')
    scan_parser.add_argument('-o', '--output', help='Output file to save results')
    
    args = parser.parse_args()
    
    if args.command == 'scan':
        try:
            # Initialize result variables
            tech_results = None
            cve_results = None
            
            # Fetch the webpage if needed
            if args.type in ['full', 'tech']:
                headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
                response = requests.get(args.url, headers=headers, timeout=10)
                response.raise_for_status()
                
                # Scan for technologies
                tech_scanner = TechnologyScanner(args.url)
                tech_scanner.scan_page(response.text)
                tech_results = tech_scanner.get_results()
            
            # Generate WordPress vulnerabilities if needed
            if args.type in ['full', 'wp']:
                wp_scanner = WordPressScanner()
                cve_results = wp_scanner.generate_mock_cves()
            
            # Format output
            result = format_combined_output(
                args.url, 
                tech_results if args.type in ['full', 'tech'] else None,
                cve_results if args.type in ['full', 'wp'] else None,
                args.type,
                verbose=args.verbose
            )
            
            # Output handling
            if args.output:
                try:
                    with open(args.output, 'w') as f:
                        f.write(result)
                    print(f"[+] Results saved to: {os.path.abspath(args.output)}")
                except Exception as e:
                    print(f"[-] Error writing to file: {e}")
                    sys.exit(1)
            else:
                print(result)
                
        except requests.exceptions.RequestException as e:
            print(f"[-] Error fetching URL: {e}")
            sys.exit(1)
        except Exception as e:
            print(f"[-] An unexpected error occurred: {e}")
            sys.exit(1)

if __name__ == '__main__':
    main()